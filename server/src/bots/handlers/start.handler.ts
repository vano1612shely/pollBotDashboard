import { Injectable } from '@nestjs/common';
import { Context, Markup, Telegraf } from 'telegraf';
import { ClientService } from '../../client/client.service';
import { MessagesService } from '../../messages/messages.service';
import { CityService } from '../../city/city.service';
import {
  MessageEntity,
  MessageType,
} from '../../messages/entities/message.entity';
import { createInlineKeyboard, parseText } from './lib';
import { BotEntity } from '../entities/bot.entity';
import { IBotContext } from '../context';

@Injectable()
export class StartHandler {
  constructor(
    private readonly clientService: ClientService,
    private readonly messagesService: MessagesService,
    private readonly cityService: CityService,
  ) {}

  register(telegrafBot: Telegraf<IBotContext>, bot: BotEntity) {
    telegrafBot.start((ctx) => {
      this.execute(ctx, bot);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ"
    telegrafBot.action('select_city', (ctx) => {
      this.showCitySelection(ctx, 0);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –º—ñ—Å—Ç
    telegrafBot.action(/city_page:(\d+)/, (ctx) => {
      const page = parseInt(ctx.match[1]);
      this.showCitySelection(ctx, page);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
    telegrafBot.action(/select_city:(\d+)/, (ctx) => {
      this.assignCityToUser(ctx, parseInt(ctx.match[1]));
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
    telegrafBot.action('back_to_start', (ctx) => {
      this.execute(ctx, bot);
    });
  }

  async execute(ctx: Context, bot: BotEntity) {
    let subscriber = await this.clientService.findOneByTelegramId(ctx.from.id);
    if (!subscriber) {
      let file_url: string = '';
      try {
        file_url = (
          await ctx.telegram.getFileLink(
            (await ctx.telegram.getUserProfilePhotos(ctx.from.id, 0, 1))
              .photos[0][0].file_id,
          )
        ).href;
      } catch (e) {
        console.log(e);
      }
      subscriber = await this.clientService.create({
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
        telegram_id: ctx.from.id,
        img_link: file_url,
      });
      await ctx.telegram.sendMessage(
        bot.chat_id,
        `–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n@${subscriber.username}\n${subscriber.first_name} ${subscriber.last_name}`,
        {
          ...Markup.inlineKeyboard([
            Markup.button.callback(
              '–í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏',
              `verify:${subscriber.telegram_id}`,
            ),
            Markup.button.callback(
              "–î–æ–¥–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–µ —ñ–º'—è",
              `custom_name:${subscriber.telegram_id}`,
            ),
          ]),
        },
      );
    }

    let message: MessageEntity;
    if (!subscriber.is_blocked) {
      if (!subscriber.is_activated) {
        message = (await this.messagesService.getByType(MessageType.StartU))[0];
      } else {
        message = (await this.messagesService.getByType(MessageType.StartA))[0];
      }

      const text = parseText(message.message);
      const originalButtons = createInlineKeyboard(message.buttons, message.id);
      console.log(subscriber);
      const cityButton = Markup.button.callback(
        subscriber.city ? `üèôÔ∏è ${subscriber.city.name}` : 'üèôÔ∏è –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ',
        'select_city',
      );

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é
      let keyboardButtons = [];
      if (
        originalButtons &&
        originalButtons.reply_markup &&
        originalButtons.reply_markup.inline_keyboard
      ) {
        keyboardButtons = [...originalButtons.reply_markup.inline_keyboard];
      }
      if (subscriber.is_activated) keyboardButtons.push([cityButton]);

      const newButtons = Markup.inlineKeyboard(keyboardButtons);

      if (message.message_img && message.message_img.endsWith('.gif')) {
        await ctx.sendAnimation(
          { url: message.message_img },
          {
            caption: text,
            parse_mode: 'HTML',
            ...newButtons,
          },
        );
      } else if (message.message_img) {
        await ctx.sendPhoto(
          { url: message.message_img },
          {
            caption: text,
            parse_mode: 'HTML',
            ...newButtons,
          },
        );
      } else {
        await ctx.reply(text, {
          parse_mode: 'HTML',
          ...newButtons,
        });
      }
    }
  }

  async showCitySelection(ctx: Context, page: number = 0) {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –º—ñ—Å—Ç–∞
      const cities = await this.cityService.findAll();

      if (cities.length === 0) {
        await ctx.editMessageText(
          '‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç –¥–ª—è –≤–∏–±–æ—Ä—É.',
          {
            ...Markup.inlineKeyboard([
              Markup.button.callback('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', 'back_to_start'),
            ]),
          },
        );
        return;
      }

      const CITIES_PER_PAGE = 5;
      const totalPages = Math.ceil(cities.length / CITIES_PER_PAGE);
      const currentPage = Math.max(0, Math.min(page, totalPages - 1));

      const startIndex = currentPage * CITIES_PER_PAGE;
      const endIndex = startIndex + CITIES_PER_PAGE;
      const citiesOnPage = cities.slice(startIndex, endIndex);

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º—ñ—Å—Ç
      const cityButtons = citiesOnPage.map((city) =>
        Markup.button.callback(`${city.name}`, `select_city:${city.id}`),
      );

      // –†–æ–∑–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω—ñ–π –≤ —Ä—è–¥—É
      const keyboard = cityButtons.map((button) => [button]);

      // –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
      const navigationButtons = [];

      if (currentPage > 0) {
        navigationButtons.push(
          Markup.button.callback(
            '‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è',
            `city_page:${currentPage - 1}`,
          ),
        );
      }

      if (currentPage < totalPages - 1) {
        navigationButtons.push(
          Markup.button.callback('–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è', `city_page:${currentPage + 1}`),
        );
      }

      if (navigationButtons.length > 0) {
        keyboard.push(navigationButtons);
      }

      // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
      keyboard.push([
        Markup.button.callback('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', 'back_to_start'),
      ]);

      const text = `üèôÔ∏è <b>–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:</b>\n\n–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${currentPage + 1} –∑ ${totalPages}\n–í—Å—å–æ–≥–æ –º—ñ—Å—Ç: ${cities.length}`;

      await ctx.editMessageText(text, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(keyboard),
      });
    } catch (error) {
      console.error('Error in showCitySelection:', error);
      await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç.', {
        ...Markup.inlineKeyboard([
          Markup.button.callback('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', 'back_to_start'),
        ]),
      });
    }
  }

  async assignCityToUser(ctx: Context, cityId: number) {
    try {
      const subscriber = await this.clientService.findOneByTelegramId(
        ctx.from.id,
      );
      if (!subscriber) {
        await ctx.answerCbQuery('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
        return;
      }

      const city = await this.cityService.findOne(cityId);
      if (!city) {
        await ctx.answerCbQuery('‚ùå –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      await this.clientService.assignCity(subscriber.id, cityId);

      const successText = `‚úÖ <b>–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–æ!</b>\n\nüèôÔ∏è –í–∞—à–µ –º—ñ—Å—Ç–æ: <b>${city.name}</b>`;

      await ctx.editMessageText(successText, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üèôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ', 'select_city')],
          [Markup.button.callback('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'back_to_start')],
        ]),
      });

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      await ctx.answerCbQuery(`‚úÖ –ú—ñ—Å—Ç–æ ${city.name} –æ–±—Ä–∞–Ω–æ!`);
    } catch (error) {
      console.error('Error in assignCityToUser:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞');

      await ctx.editMessageText(
        '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
        {
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üèôÔ∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É', 'select_city')],
            [Markup.button.callback('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', 'back_to_start')],
          ]),
        },
      );
    }
  }
}
