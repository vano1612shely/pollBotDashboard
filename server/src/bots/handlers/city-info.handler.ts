import { Injectable } from '@nestjs/common';
import { Context, Markup, Telegraf } from 'telegraf';
import { ClientService } from '../../client/client.service';
import { IBotContext } from '../context';

@Injectable()
export class CityInfoHandler {
  constructor(private readonly clientService: ClientService) {}

  register(telegrafBot: Telegraf<IBotContext>) {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
    telegrafBot.command('mycity', (ctx) => {
      this.showCurrentCity(ctx);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—î –º—ñ—Å—Ç–æ"
    telegrafBot.action('my_city', (ctx) => {
      this.showCurrentCity(ctx);
    });
  }

  async showCurrentCity(ctx: Context) {
    try {
      const subscriber = await this.clientService.findByTelegramIdWithCity(
        ctx.from.id,
      );

      if (!subscriber) {
        await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
        return;
      }

      if (!subscriber.city) {
        await ctx.reply('üèôÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ –æ–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ.', {
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üèôÔ∏è –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ', 'select_city')],
          ]),
        });
        return;
      }

      const city = subscriber.city;
      const text = `üèôÔ∏è <b>–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ:</b>\n\nüìç <b>${city.name}</b>\n\nüìÖ –û–±—Ä–∞–Ω–æ: ${new Date(subscriber.updated_at).toLocaleDateString('uk-UA')}`;

      await ctx.reply(text, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üèôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ', 'select_city')],
          [Markup.button.callback('üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'back_to_start')],
        ]),
      });
    } catch (error) {
      console.error('Error in showCurrentCity:', error);
      await ctx.reply(
        '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞—à–µ –º—ñ—Å—Ç–æ.',
      );
    }
  }
}
